!/bin/bash

# malware signatures
check_signatures() {
    local file=$1
    echo "Checking $file for known malware signatures..."

    # Define an array of known malware file hashes (SHA-256)
    local known_hashes=(
"00ae07c9fe63b080181b8a6d59c6b3b6f9913938858829e5a42ab90fb72edf7a")
    local found_any=false  # Flag to track if any signature is found

    # Calculate the file's hash (SHA-256)
    file_hash=$(sha256sum "$file" | awk '{print $1}')
    for known_hash in "${known_hashes[@]}"; do
        if [ "$file_hash" = "$known_hash" ]; then
            echo "Known malware file hash found: $known_hash"
            found_any=true
        fi
    done

    # If no hashes are found, print a message
    if [ "$found_any" = false ]; then
        echo "No known malware signatures found in $file."
    fi
}

# Function to check for suspicious strings and print all found patterns
check_suspicious_strings() {
    local file=$1
    echo "Checking $file for suspicious strings..."

    # Define an array of suspicious patterns
    local patterns=("eval" "base64" "exec" "system" "shell_exec" "passthru" "popen" "proc_open")

    # Variable to store if any pattern was found
    local found_any=false

    # Loop through each pattern and search in the file
    for pattern in "${patterns[@]}"; do
        # Search for all occurrences of the pattern
        matches=$(grep -o "$pattern" "$file")

        if [ -n "$matches" ]; then
            echo "Suspicious pattern found: $pattern"
            found_any=true
        fi
    done

    if [ "$found_any" = false ]; then
        echo "No suspicious patterns found."
    fi
}

# Function to extract and check printable strings
check_printable_strings() {
    local file=$1
    echo "Extracting and checking printable strings in $file..."

    # Extract printable strings and search for suspicious patterns
    strings "$file" | grep -E "http|ftp|/bin/sh|/bin/bash|/usr/bin/perl|/usr/bin/python"
}

# Function to check for behavioral patterns
check_behavioral_patterns() {
    local file=$1
    echo "Checking $file for behavioral patterns..."

    # Example behavioral patterns (e.g., network connections, file modifications)
    local behaviors=("connect" "open" "read" "write" "delete")

    # Loop through each behavior and search in the file
    for behavior in "${behaviors[@]}"; do
        if grep -q "$behavior" "$file"; then
            echo "Behavioral pattern found: $behavior"
        fi
    done
}

# Function to simulate file execution in a controlled environment
simulate_execution() {
    local file=$1
    echo "Simulating the execution of $file in a sandboxed environment using Firejail..."

    # Firejail restricts the execution environment for the file
    firejail --seccomp --noprofile --net=none "$file"

    if [ $? -eq 0 ]; then
        echo "File executed successfully in the sandbox."
    else
        echo "File execution failed or was blocked by the sandbox."
    fi
}

# Main script
if [ $# -eq 0 ]; then
    echo "Usage: $0 <file>"
    exit 1
fi

file=$1

if [ ! -f "$file" ]; then
    echo "File not found: $file"
    exit 1
fi

check_signatures "$file"
check_suspicious_strings "$file"
check_printable_strings "$file"
check_behavioral_patterns "$file"

# Ask the user if they want to simulate the file execution
read -p "Do you want to simulate the execution of this file in a sandboxed environment? (y/n): " choice

case "$choice" in
    y|Y ) simulate_execution "$file";;
    n|N ) echo "Skipping file execution simulation.";;
    * ) echo "Invalid input. Skipping file execution simulation.";;
esac

echo "Malware analysis completed."

